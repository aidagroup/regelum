name: Pylint

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # needed to commit changes to README on push
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint

    - name: Run pylint
      run: |
        # Gather all .py files except in 'examples', 'tests', or 'utils'
        # Note that -prune approach or -not -path approach both work; here's a simpler approach:
        find . -type f -name '*.py' \
          -not -path '*/examples/*' \
          -not -path '*/tests/*' \
          -not -path '*/utils/*' \
          -not -path '*/old_snippets/*' \
          > filelist.txt

        echo "The following Python files will be linted:"
        cat filelist.txt || echo "No .py files found!"

        # Run pylint on that list. We use '|| true' so we don't fail the job if Pylint complains.
        pylint --output-format=text $(cat filelist.txt) | tee ./pylint.txt || true

        # Now extract the numeric score
        # Typically Pylint ends with: "Your code has been rated at X.Y/Z"
        PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint.txt)

        # If for some reason the extraction fails, default to 0.0
        if [ -z "$PYLINT_SCORE" ]; then
          PYLINT_SCORE="0.0"
        fi

        echo "Raw pylint output:"
        cat ./pylint.txt

        echo "Extracted score: $PYLINT_SCORE"
        echo "PYLINT_SCORE=$PYLINT_SCORE" >> $GITHUB_ENV

    - name: Update README badge
      # Only run if it's a push event (not pull_request)
      if: ${{ github.event_name == 'push' }}
      run: |
        # Determine color based on numeric score thresholds
        SCORE_FLOAT=$(echo "$PYLINT_SCORE" | sed 's/[[:space:]]//g')  # strip whitespace just in case
        # Use bc to compare floats
        if [ $(echo "$SCORE_FLOAT >= 9" | bc -l) -eq 1 ]; then
          COLOR="brightgreen"
        elif [ $(echo "$SCORE_FLOAT >= 7" | bc -l) -eq 1 ]; then
          COLOR="green"
        elif [ $(echo "$SCORE_FLOAT >= 5" | bc -l) -eq 1 ]; then
          COLOR="yellow"
        else
          COLOR="red"
        fi

        echo "Inferred color: $COLOR"

        # We'll replace the entire Pylint line in README.
        # The pattern looks for: ![Pylint](https://img.shields.io/badge/pylint-<any float>%2F10-<any color>)
        # Use an extended regex (-E) or a different delimiter to avoid escaping fiascos:
        SEARCH='!\[Pylint\]\(https://img\.shields\.io/badge/pylint-[0-9.]*%2F10-[a-z]*\)'
        REPLACE="![Pylint](https://img.shields.io/badge/pylint-${SCORE_FLOAT}%2F10-${COLOR})"

        # Using the -E (extended regex) form of sed and '|' delimiter for clarity
        sed -i -E "s|$SEARCH|$REPLACE|g" README.md

        git config --global user.name 'GitHub Action'
        git config --global user.email 'action@github.com'
        git add README.md

        git commit -m "Update pylint badge to ${SCORE_FLOAT}/10" || echo "No changes to commit"
        git push
